name: Build Keybow Configurator EXE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller -r requirements.txt

    - name: Build EXE with PyInstaller
      run: pyinstaller "python config ui/keybow.py" --onefile --noconsole

    - name: Zip keybow files folder
      run: |
        powershell -Command "Compress-Archive -Path 'keybow files\\*' -DestinationPath 'keybow-files.zip'"

    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: keybow-app
        path: dist/keybow.exe

    - name: Upload folder ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: keybow-files
        path: keybow-files.zip

    - name: Set Git identity
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Get latest tag and create new one
      run: |
        # Get the latest tag (if any)
        $latest_tag = git describe --tags $(git rev-list --tags --max-count=1) 2>$null
        
        # If no tags exist, start with v1
        if (-not $latest_tag) {
          $new_tag = "v1"
        } else {
          # Extract the number from the latest tag, increment it, and set the new tag
          $version_number = $latest_tag.TrimStart('v')
          $new_version = [int]$version_number + 1
          $new_tag = "v$new_version"
        }

        Write-Host "New tag is $new_tag"

        # Check if the tag already exists in the remote repository
        $existing_tag = git ls-remote --tags origin "$new_tag"
        if ($existing_tag) {
          Write-Host "Tag $new_tag already exists on the remote, skipping tag creation."
        } else {
          # Create and push the new tag
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin "$new_tag"
        }

    - name: Create GitHub Release
      id: release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/keybow.exe
          keybow-files.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
