name: Build Keybow Configurator EXE

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller -r requirements.txt

    - name: Build EXE with PyInstaller
      run: pyinstaller "python config ui/keybow.py" --onefile --noconsole

    - name: Zip keybow files folder
      run: powershell -Command "Compress-Archive -Path 'keybow files\\*' -DestinationPath 'keybow-files.zip'"

    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: keybow-app
        path: dist/keybow.exe

    - name: Upload folder ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: keybow-files
        path: keybow-files.zip

    - name: Set Git identity
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Create new tag if needed
      id: tag
      shell: pwsh
      run: |
        git fetch --tags

        $tags = git tag --sort=-v:refname | Where-Object { $_ -match '^v\d+\.\d+' }
        $lastTag = if ($tags.Count -gt 0) { $tags[0] } else { "v0.0" }

        if ($lastTag -match '^v(\d+)\.(\d+)$') {
          $major = [int]$matches[1]
          $minor = [int]$matches[2]
        } else {
          $major = 0
          $minor = 0
        }

        # Check commit message for 'MAJOR:'
        $commitMsg = git log -1 --pretty=%B
        if ($commitMsg -match '(?i)MAJOR:') {
          $major += 1
          $minor = 0
        } else {
          $minor += 1
        }

        $newTag = "v$major.$minor"

        # Push the new tag if it doesn't exist
        if (-not (git ls-remote --tags origin | Select-String "refs/tags/$newTag")) {
          git tag -a "$newTag" -m "Release $newTag"
          git push origin "$newTag"
        } else {
          Write-Host "Tag $newTag already exists."
        }

        "tag_name=$newTag" >> $env:GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        files: |
          dist/keybow.exe
          keybow-files.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
