name: Build Keybow Configurator EXE

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller -r requirements.txt

    - name: Build EXE with PyInstaller
      run: pyinstaller "python config ui/keybow.py" --onefile --noconsole

    - name: Zip keybow files folder
      run: |
        powershell -Command "Compress-Archive -Path 'keybow files\\*' -DestinationPath 'keybow-files.zip'"

    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: keybow-app
        path: dist/keybow.exe

    - name: Upload folder ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: keybow-files
        path: keybow-files.zip

    - name: Set Git identity
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

        
    - name: Create new tag if needed
      id: tag
      shell: pwsh
      run: |
        git fetch --tags
        $tags = git tag --sort=-v:refname | Where-Object { $_ -match '^v\d+$' }
        if ($tags.Count -gt 0) {
          $lastTag = $tags[0]
          $last = $lastTag.Substring(1)
          $new = [int]$last + 1
        } else {
          $new = 1
        }
        $new_tag = "v$($new)"

        $existing_remote_tags = git ls-remote --tags origin | Select-String -Pattern "refs/tags/$new_tag"
        if (-not $existing_remote_tags) {
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin "$new_tag"
        } else {
          Write-Host "Tag $new_tag already exists remotely. Skipping creation."
        }

        echo "tag_name=$new_tag" >> $env:GITHUB_OUTPUT



    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        files: |
          dist/keybow.exe
          keybow-files.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
